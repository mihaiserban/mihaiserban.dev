/* padding */
.p4 {
  padding: 4px;
}
.p8 {
  padding: 8px;
}
.p12 {
  padding: 12px;
}
.p16 {
  padding: 16px;
}
.p24 {
  padding: 24px;
}
.p32 {
  padding: 32px;
}
.p64 {
  padding: 64px;
}

/* padding left */
.pl4 {
  padding-left: 4px;
}
.pl8 {
  padding-left: 8px;
}
.pl12 {
  padding-left: 12px;
}
.pl16 {
  padding-left: 16px;
}
.pl24 {
  padding-left: 24px;
}
.pl32 {
  padding-left: 32px;
}
.pl64 {
  padding-left: 64px;
}

/* padding right */
.pr4 {
  padding-right: 4px;
}
.pr8 {
  padding-right: 8px;
}
.pr12 {
  padding-right: 12px;
}
.pr16 {
  padding-right: 16px;
}
.pr24 {
  padding-right: 24px;
}
.pr32 {
  padding-right: 32px;
}
.pr64 {
  padding-right: 64px;
}

/* padding bottom */
.pb4 {
  padding-bottom: 4px;
}
.pb8 {
  padding-bottom: 8px;
}
.pb12 {
  padding-bottom: 12px;
}
.pb16 {
  padding-bottom: 16px;
}
.pb24 {
  padding-bottom: 24px;
}
.pb32 {
  padding-bottom: 32px;
}
.pb64 {
  padding-bottom: 64px;
}

/* padding top */
.pt4 {
  padding-top: 4px;
}
.pt8 {
  padding-top: 8px;
}
.pt12 {
  padding-top: 12px;
}
.pt16 {
  padding-top: 16px;
}
.pt24 {
  padding-top: 24px;
}
.pt32 {
  padding-top: 32px;
}
.pt64 {
  padding-top: 64px;
}

/* margin */
.m4 {
  margin: 4px;
}
.m8 {
  margin: 8px;
}
.m16 {
  margin: 16px;
}
.m24 {
  margin: 24px;
}
.m32 {
  margin: 32px;
}
.m64 {
  margin: 64px;
}

/* margin left */
.ml4 {
  margin-left: 4px;
}
.ml8 {
  margin-left: 8px;
}
.ml16 {
  margin-left: 16px;
}
.ml24 {
  margin-left: 24px;
}
.ml32 {
  margin-left: 32px;
}
.ml64 {
  margin-left: 64px;
}

/* margin right */
.mr4 {
  margin-right: 4px;
}
.mr8 {
  margin-right: 8px;
}
.mr16 {
  margin-right: 16px;
}
.mr24 {
  margin-right: 24px;
}
.mr32 {
  margin-right: 32px;
}
.mr64 {
  margin-right: 64px;
}

/* margin bottom */
.mb4 {
  margin-bottom: 4px;
}
.mb8 {
  margin-bottom: 8px;
}
.mb16 {
  margin-bottom: 16px;
}
.mb24 {
  margin-bottom: 24px;
}
.mb32 {
  margin-bottom: 32px;
}
.mb64 {
  margin-bottom: 64px;
}

/* margin top */
.mt4 {
  margin-top: 4px;
}
.mt8 {
  margin-top: 8px;
}
.mt16 {
  margin-top: 16px;
}
.mt24 {
  margin-top: 24px;
}
.mt32 {
  margin-top: 32px;
}
.mt64 {
  margin-top: 64px;
}

/* margin left-right */
.mlr4 {
  margin-left: 4px;
  margin-right: 4px;
}
.mlr8 {
  margin-left: 8px;
  margin-right: 8px;
}
.mlr16 {
  margin-left: 16px;
  margin-right: 16px;
}
.mlr24 {
  margin-left: 24px;
  margin-right: 24px;
}
.mlr32 {
  margin-left: 32px;
  margin-right: 32px;
}
.mlr64 {
  margin-left: 64px;
  margin-right: 64px;
}

/* flex classes */

.fixed {
  position: fixed;
}
.absolute {
  position: absolute;
}
.relative {
  position: relative;
}
.static {
  position: static;
}

.top {
  top: 0;
}
.right {
  right: 0;
}
.left {
  left: 0;
}
.bottom {
  bottom: 0;
}

.pullRight {
  margin-left: auto;
}

.fullHeight {
  height: 100%;
}
.fullWidth {
  width: 100%;
}

.z-neg1 {
  z-index: -1;
}
.z0 {
  z-index: 0;
}
.z1 {
  z-index: 1;
}
.z2 {
  z-index: 2;
}
.z3 {
  z-index: 3;
}
.z4 {
  z-index: 4;
}
.z5 {
  z-index: 5;
}

.inline-block {
  display: inline-block;
}
/**
  * Set auto margins on left and right. This pattern is useful for horizontally centering block elements.
  *
  * @example
  * <div class='mx-auto w60 bg-darken10'>mx-auto</div>
  * @memberof Margins
  */
.mx-auto {
  margin-left: auto;
  margin-right: auto;
}

/**
  * Flexbox utilities. All class sets include *-mm, *-ml, and *-mxl variations to target screen sizes.
  *
  * Usage must fit the following pattern:
  * - flex-parent rules control the parent container, while flex-child rules control the children.
  * - By default, the main axis is horizontal and the cross axis is vertical. The axes can be inverted with the use of flex-parent--column.
  * - To learn about how the flexbox system works, check out ["A Complete Guide to Flexbox"](https://css-tricks.com/snippets/css/a-guide-to-flexbox).
  *
  * @section Flexbox
  * @memberof Layout
  */

/**
  * Establish an element as a flex parent.
  * These classes allow the use of flex-parent--* modifiers, and flex-child classes on children.
  *
  * @group
  * @memberof Flexbox
  * @example
  * <div class='bg-darken10 flex-parent'>flex-parent</div>
  * <div class='bg-darken10 flex-parent-inline'>flex-parent-inline</div>
  */
.flex-parent {
  display: flex;
}
.flex-parent-inline {
  display: inline-flex;
}
/** @endgroup */

/**
  * Set the direction of the main axis to top-to-bottom (default is left-to-right).
  *
  * @memberof Flexbox
  * @example
  * <div class='bg-darken10 flex-parent flex-parent--column'>
  *  <span class='flex-child'>1</span>
  *  <span class='flex-child'>2</span>
  *  <span class='flex-child'>3</span>
  * </div>
  */
.flex-parent--column {
  flex-direction: column;
}

/**
  * Set the direction of the main axis to bottom-to-top (default is left-to-right).
  *
  * @memberof Flexbox
  * @example
  * <div class='bg-darken10 flex-parent flex-parent--column-reverse'>
  *  <span class='flex-child'>1</span>
  *  <span class='flex-child'>2</span>
  *  <span class='flex-child'>3</span>
  * </div>
  */
.flex-parent--column-reverse {
  flex-direction: column-reverse;
}

/**
  * Set the direction of the main axis to left-to-right (the default value of flex-parent).
  *
  * @memberof Flexbox
  * @example
  * <div class='bg-darken10 flex-parent flex-parent--row'>
  *  <span class='flex-child'>1</span>
  *  <span class='flex-child'>2</span>
  *  <span class='flex-child'>3</span>
  * </div>
  */
.flex-parent--row {
  flex-direction: row;
}

/**
  * Set the direction of the main axis to right-to-left (default is left-to-right).
  *
  * @memberof Flexbox
  * @example
  * <div class='bg-darken10 flex-parent flex-parent--row-reverse'>
  *  <span class='flex-child'>1</span>
  *  <span class='flex-child'>2</span>
  *  <span class='flex-child'>3</span>
  * </div>
  */
.flex-parent--row-reverse {
  flex-direction: row-reverse;
}

/**
  * Center an element's children on the main axis.
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent flex-parent--center-main bg-darken10'>
  *  <div class='flex-child bg-darken10'>child</div>
  * </div>
  */
.flex-parent--center-main {
  justify-content: center;
}

/**
  * Center an element's children on the cross axis.
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent flex-parent--center-cross bg-darken10 h120'>
  *  <div class='flex-child bg-darken10'>child</div>
  * </div>
  */
.flex-parent--center-cross {
  align-items: center;
}

/**
  * Align an element's children to the start of the cross axis.
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent flex-parent--start-cross h120 bg-darken10'>
  *  <div class='flex-child bg-darken10 h42'>child</div>
  *  <div class='flex-child bg-darken10'>child</div>
  * </div>
  */
.flex-parent--start-cross {
  align-items: flex-start;
}

/**
  * Align an element's children to the start of the main axis.
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent flex-parent--start-main bg-darken10'>
  *  <div class='flex-child bg-darken10'>child</div>
  * </div>
  */
.flex-parent--start-main {
  justify-content: flex-start;
}

/**
  * Align an element's children to the end of the cross axis.
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent flex-parent--end-cross h120 bg-darken10'>
  *  <div class='flex-child bg-darken10 h42'>child</div>
  *  <div class='flex-child bg-darken10'>child</div>
  * </div>
  */
.flex-parent--end-cross {
  align-items: flex-end;
}

/**
  * Align an element's children to the end of the main axis.
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent flex-parent--end-main bg-darken10'>
  *  <div class='flex-child bg-darken10'>child</div>
  * </div>
  */
.flex-parent--end-main {
  justify-content: flex-end;
}

/**
  * Allow children to wrap. By default, they are all forced onto one line.
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent flex-parent--wrap bg-darken10 clip'>
  *  <div class='flex-child bg-darken10 w600'>child</div>
  *  <div class='flex-child bg-darken10 w600'>child</div>
  * </div>
  */
.flex-parent--wrap {
  flex-wrap: wrap;
}

/**
  * Stretch children to fill the parent container along the cross axis.
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent flex-parent--stretch-cross bg-darken10 h120'>
  *  <div class='flex-child bg-darken10'>child</div>
  * </div>
  */
.flex-parent--stretch-cross {
  align-items: stretch;
}

/**
  * Evenly distribute children across the line, so first child is at the start
  * and last child is at the end.
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent flex-parent--space-between-main bg-darken10 h120'>
  *  <div class='flex-child bg-darken10'>child</div>
  *  <div class='flex-child bg-darken10'>child</div>
  * </div>
  */
.flex-parent--space-between-main {
  justify-content: space-between;
}

/**
  * Establish an element as a flex child. This class mainly exists to anticipate certain bugs
  * and unexpected behaviors that can otherwise occur with flexbox (especially in IE).
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent flex-parent--center-main'>
  *   <div class='flex-child bg-darken10'>child</div>
  * </div>
  */
.flex-child {
  display: block;
  max-width: 100%;
}
/* Specifically, the above addresses #1, #2, and #12 in https://github.com/philipwalton/flexbugs */

/**
  * Make a child to grow to fill whatever space is available in the main axis of the parent container.
  * This is useful when you have one or more elements of
  * fixed width, and another element that should take up the remaining space in the row.
  *
  * Typically, you will also want to apply the flex-child--no-shrink modifier to the element in the row with a fixed width.
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent bg-darken10'>
  *  <div class='flex-child flex-child--no-shrink border w240'>child</div>
  *  <div class='flex-child flex-child--grow border'>child</div>
  * </div>
  */
.flex-child--grow {
  flex-grow: 1;
  min-width: 0;
}

/**
  * Prevent a child from shrinking below its width value.
  *
  * By default, flex children (even with specified widths) will shrink as needed to accommodate sibling elements.
  * This class prevents that default shrinkage, forcing siblings to accommodate the parent's width.
  *
  * @memberof Flexbox
  * @example
  * <div class='flex-parent bg-darken10 w240'>
  *  <div class='flex-child flex-child--no-shrink border w120'>child</div>
  *  <div class='flex-child border w120'>child</div>
  *  <div class='flex-child border w120'>child</div>
  * </div>
  */
.flex-child--no-shrink {
  flex-shrink: 0;
}

/* end flex */

/**
  * Extra layout utilities.
  *
  * @memberof Layout
  * @section Layout utils
  */

/**
  * Bleed utilities. Bleed classes allow an element inside a centered container to escape the container and meet the edge of the screen.
  * When using the bleed classes, consider adding the .clip class on a parent element to prevent horizontal overflow.
  *
  * *Warning*: Bleeding elements will never bleed out to more than 50% of the viewport width.
  * So you should not make an element bleed to one side unless it's already on that half of
  * the screen.
  *
  * *Warning*: In Firefox, children with negative margins have different layout effects than in other browsers.
  * The bleed classes should only be used if the parent's width is stable, either because it is set or because other children determine it.
  *
  * Class set (except clearfix) includes *-mm, *-ml, and *-mxl variations to target screen sizes.
  * These screen-size variants are best suited to *adding* the bleed, not *removing* it.
  * Be aware of the effects of the unbleed class: it resets margin-left, margin-right,
  * and flex-grow.
  *
  * @group
  * @example
  * <div class='bg-darken10 flex-parent flex-parent--center-main clip'>
  *   <div class='w240 px12 py12 bg-darken10'>
  *     <div class='bg-darken10 bleed-r'>Right bleed</div>
  *   </div>
  * </div>
  *
  * @memberof Layout utils
  */
.bleed {
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
}
.bleed-r {
  flex-grow: 1;
  margin-right: calc(50% - 50vw);
}
.bleed-l {
  flex-grow: 1;
  margin-left: calc(50% - 50vw);
}
.unbleed {
  flex-grow: 0;
  margin-left: 0;
  margin-right: 0;
}
/* @endgroup */

/**
  * Float utilities. Class set (except clearfix) includes *-mm, *-ml, and *-mxl variations to target screen sizes.
  *
  * @group
  * @memberof Layout utils
  * @example
  * <div class='clearfix'>
  *   <div class='fl bg-darken10'>left</div>
  * </div>
  * <div> with .clearfix </div>
  * <div class='fr bg-darken10'>right</div>
  * <div class='bg-darken10'> without .clearfix </div>
  * <div class='fl unfloat'>unfloat</div>
  */
.fl {
  float: left;
}
.fr {
  float: right;
}
.unfloat {
  float: none;
}
.clearfix::after {
  content: "";
  display: block;
  clear: both;
}
/** @endgroup */
